<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=us-ascii">
<TITLE>C:\CH4~1\CH 4.htm</TITLE>
<META NAME="GENERATOR" CONTENT="ADOBE SYSTEMS, INC. - WORD FOR WORD">
</HEAD>

<BODY>
<BASEFONT SIZE="3">
<UL>
<UL>
<UL>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<U>Chapter 4
</UL>
</UL>
</UL>
<BR>
</U>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<BR>
<H2 ALIGN="CENTER">
</FONT>
<FONT SIZE="6" FACE="Times Roman" COLOR="#000000">
OS-9's Unified
</FONT>
</H2>
<H2 ALIGN="CENTER">
<FONT SIZE="6" FACE="Times Roman" COLOR="#000000">
Input/Output System
</FONT>
</H2>
<FONT SIZE="6" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Chapter 1 mentioned that OS-9 has a unified 1/O system, con<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
sisting of all modules except those on the kernel level. This chap<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ter discusses the 1/O modules in detail.<BR>
<BR>
</FONT>
<FONT SIZE="5" FACE="Times Roman" COLOR="#000000">
I/O System Modules<BR>
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
INIT<BR>
<IMG SRC="file:///C:\CH4~1\GR000000.JPG" WIDTH="256" HEIGHT="108">
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
OS-9 KERNEL
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
(OS9P1, OS9P2)
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
nput/Output Manager
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
(IOMAN)
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
 
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Disk File Pipe File<BR>
 
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Manager Manager<BR>
 
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
(RBF)  (Pipeman)<BR>
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Char. File<BR>
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Manager
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
(SCF)
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Printer  S1.0<BR>
<IMG SRC="file:///C:\CH4~1\GR000001.JPG" WIDTH="125" HEIGHT="37">
<IMG SRC="file:///C:\CH4~1\GR000002.JPG" WIDTH="290" HEIGHT="34">
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Ram
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Ram Disk
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Driver
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000003.JPG" WIDTH="37" HEIGHT="43">
<IMG SRC="file:///C:\CH4~1\GR000004.JPG" WIDTH="20" HEIGHT="5">
<IMG SRC="file:///C:\CH4~1\GR000005.JPG" WIDTH="18" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000006.JPG" WIDTH="20" HEIGHT="3">
<IMG SRC="file:///C:\CH4~1\GR000007.JPG" WIDTH="25" HEIGHT="1">
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
CC3Disk
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Disk
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Driver
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
CC3Hdisk
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Disk
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Driver
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Pipe<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Driver<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
(Piper)<BR>
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
ACIAPak
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Driver
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="7" FACE="Times Roman" COLOR="#000000">
nnn 
</FONT>
<FONT SIZE="1" FACE="Arial Narrow1" COLOR="#000000">
HO H1 Pipe<BR>
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
RBF Device Descriptors Pipe Descr.<BR>
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
ModPak
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Driver
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
CC310<BR>
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
T1 T2 P1  P~<BR>
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
SCF Device Descriptors<BR>
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Vdglnt<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
CC310<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Interface<BR>
<BR>
</FONT>
<FONT SIZE="1" FACE="Times Roman" COLOR="#000000">
<U>I </U>_j<BR>
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<U>Term-Vdg</U>
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Desc
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Grflnt
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
CC310
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Interface
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Windlnt<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
CC310<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Interface<BR>
<BR>
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
GrfDrv<BR>
<BR>
<P ALIGN="CENTER">
</FONT>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Term-Win
</FONT>
</P>
<P ALIGN="CENTER">
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
Desc
</FONT>
</P>
<FONT SIZE="1" FACE="Arial Narrow" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000008.JPG" WIDTH="87" HEIGHT="28">
<BR>
</FONT>
<FONT SIZE="2" FACE="Arial" COLOR="#000000">
<B>OS-9 COMPONENT MODULE ORGANIZATION<BR>
</B>
</FONT>
<FONT SIZE="2" FACE="Arial" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000009.JPG" WIDTH="20" HEIGHT="8">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9 Technical Reference<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000010.JPG" WIDTH="302" HEIGHT="1">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The VDG Interface performs both interface and low level routines
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
for VDG Color Computer 2 compatible modes and has limited
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
support for high res screen allocation.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The Grflnt Interface provides the standard code interpretations
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
and interface functions.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The Windint Interface, available in the Multi-view package, con
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tains all the functionality of Grfint, along with additional sup
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
port features. If you use WindInt, do not include Grflnt.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Both WindInt and Grflnt use the low-level driver Grfdrv to per
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
form drawing on the bit-map screens.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Term-VDG uses CC310NdgInt while Term-win and all win
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
dow descriptors use CC310/(WindInt/Grflnt)/GrfDrv modules.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The I/O system provides system-wide, hardware-independent I/O
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
services for user programs and OS-9 itself. All I/O system calls
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
are received by the kernel and passed to the I/O manager for
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
processing.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The I/O manager performs some processing, such as the alloca
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tion of data structures for the I/O path. Then, it calls the file
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
managers and device drivers to do most of the work. Additional
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
file manager, device driver, and device descriptor modules can be
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
loaded into memory from files and used while the system is
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
running.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<B>The I/O Manager<BR>
</B>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The I/O manager provides the first level of service of I/O system
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
calls. It routes data on I/O process paths to and from the appro
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
priate file managers and device drivers.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The I/O Manager also maintains two important internal OS-9
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
data structures-the 
</FONT>
<FONT SIZE="2" FACE="Times Roman" COLOR="#000000">
<I>device table </I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
and the 
</FONT>
<FONT SIZE="2" FACE="Times Roman" COLOR="#000000">
<I>path table. </I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Never mod
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ify the I/O manager.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
When a path is opened, the I/O manager tries to link to a mem
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ory module that has the device name given or implied in the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
pathlist. This module is the 
</FONT>
<FONT SIZE="2" FACE="Times Roman" COLOR="#000000">
<I>device descriptor. </I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
It contains the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
names of the device driver and file manager for the device. The
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
I/O manager saves the names so later system calls can be routed
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
to these modules.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-2<BR>
<IMG SRC="file:///C:\CH4~1\GR000011.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000012.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000013.JPG" WIDTH="20" HEIGHT="3">
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9's Unified Input/Output System / 4
</UL>
</UL>
</UL>
<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<B>File Managers
</UL>
<BR>
</B>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
OS-9 can have any number of 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>file manager modules. </I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Each of
</UL>
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
'~ these modules processes the raw data stream to or from a class<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
of device drivers that have similar operational characteristics. It
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
removes as many unique characteristics as possible from I/O
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
operations. Thus, it assures that similar devices conform to the
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
OS-9 standard I/O and file structure.
</UL>
<BR>
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The file manager also is responsible for mass storage allocation
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
and directory processing, if these are applicable to the class of
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
devices it serves.
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
File managers usually buffer the data stream and issue requests
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
to the kernel for dynamic allocation of buffer memory. They can
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
also monitor and process the data stream, for example, adding
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
line-feed characters after carriage-return characters.
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The file managers are re-entrant. The three standard OS-9 file
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
managers are:
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
&middot; Random block file manager: The RBF manager supports
</UL>
</UL>
</UL>
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
-- random-access, block-structured devices such as disk sys-<BR>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tems and bubble memories. (Chapter 5 discusses the
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
RBF manager in detail.)
</UL>
</UL>
</UL>
<BR>
<BR>
<P ALIGN="JUSTIFY">
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
&middot; Sequential Character File Manager: The SCF manager
</UL>
</UL>
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<UL>
<UL>
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
supports single-character-oriented devices, such as CRTs
</UL>
</UL>
</UL>
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<UL>
<UL>
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
or hardcopy terminals, printers, and modems. (Chapter 6
</UL>
</UL>
</UL>
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<UL>
<UL>
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
discusses SCF in detail.)
</UL>
</UL>
</UL>
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
&middot; Pipe File Manager (PIPEMAN): The pipe manager sup
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ports interprocess communication via pipes.
</UL>
</UL>
</UL>
</UL>
<BR>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<B>File Manager Structure
</UL>
<BR>
</B>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Every file manager must have a branch table in exactly the fol
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
lowing format. Routines that are not used by the file manager
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
must branch to an error routine, that sets the carry and loads B
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
with an appropriate error code before returning. Routines
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
returning without error must ensure that the carry bit is clear.
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000014.JPG" WIDTH="302" HEIGHT="1">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-3<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9 <U>Technical Reference<BR>
</U></I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>All routines are entered with:
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>* CY) = Path Descriptor pointer
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>* CU) = Caller's register stack pointer
</UL>
<BR>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>EntryPt equ
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra Create
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra Open
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra MakDir
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra ChgDir
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra Delete
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra Seek
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra Read
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra Write
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra ReadLn
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra WriteLn
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra GetStat
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra PutStat
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lbra Close
</UL>
<BR>
<BR>
</TT>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
Create, Open<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Create and Open handle file creating and opening for devices.
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Typically, the process involves allocating any required buffers,
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
initializing path descriptor variables, and establishing the path
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
name. If the file manager controls multi-file devices (RBF),
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
directory searching is performed to find or create the specified
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
file.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
Makdir<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Makdir creates a directory file on multi-file devices. Makdir is
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
neither preceded by a Create nor followed by a Close. File man
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
agers that are incapable of supporting directories need to return
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
carry set with an appropriate error code in Register B.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
ChgDir<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
On multi-file devices, ChgDir searches for a directory file. If
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ChgDir finds the directory, it saves the address of the directory
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
(up to four bytes) in the caller's process descriptor. The descrip
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tor is located at P$DIO + 2 (for a data directory) or P$DIO + 8
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
(for an execution directory).
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000015.JPG" WIDTH="20" HEIGHT="3">
<IMG SRC="file:///C:\CH4~1\GR000016.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000017.JPG" WIDTH="18" HEIGHT="3">
<IMG SRC="file:///C:\CH4~1\GR000018.JPG" WIDTH="302" HEIGHT="2">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-4<BR>
<IMG SRC="file:///C:\CH4~1\GR000019.JPG" WIDTH="84" HEIGHT="1">
</FONT>
<FONT SIZE="2" FACE="Times Roman" COLOR="#000000">
OS-9's 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>Unified Input/Output System / 4<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
In the case of the RBF manager, the address of the directory's
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
file descriptor is saved. Open/Create begins searching in the cur
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
rent directory when the caller's pathlist does not begin with a
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
backslash M. File managers that do not support directories
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
should return the carry set and an appropriate error code in
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<B>Register B.</B>
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<B>Delete<BR>
</B>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Multi-file device managers handle file delete requests by initiat
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
ing a directory search that is similar to Open. Once a device
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
manager finds the file, it removes the file from the directory.
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Any media in use by the file are returned to unused status. In
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
the case of the RBF manager, space is returned for system use
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
and is marked as available in the free cluster bit map on the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
disk. File managers that do not support multi- file devices
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
return an error.
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<B>Seek<BR>
</B>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
File managers that support random access devices use Seek to
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
position file pointers of an already open path to the byte speci
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
fied. Typically, the positioning is a logical movement. No error is
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
produced at the time of the seek if the position is beyond the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
current "end of file".
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Normally, file managers that do not support random access
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
ignore Seek, However, an SCF-type manager can use Seek to
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
perform cursor positioning.
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<B>Read<BR>
</B>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Read returns the number of bytes requested to the user's data
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
buffer. Make sure Read returns an EOF error if there is no data
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
available. Read must be capable of copying pure binary data, and
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
generally performs no editing on the data. Generally, the file
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
manager calls the device driver to actually read the data into
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
the buffer. Then, the file manager copies the data from the buffer
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
into the user's data area to keep file managers device
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
independent.
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
4-5
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
<BR>
<IMG SRC="file:///C:\CH4~1\GR000020.JPG" WIDTH="104" HEIGHT="1">
<IMG SRC="file:///C:\CH4~1\GR000021.JPG" WIDTH="18" HEIGHT="4">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I><U>OS-9 Technical Reference<BR>
</U></I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
Write<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The Write request, like Read, must be capable of recording pure
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
binary data without alteration. The routines for Read and Write
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
are almost identical with the exception that Write uses the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
device driver's output routine instead of the input routine. The
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
RBF manager and similar random access devices that use fixed
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
length records (sectors) must often preread a sector before writ
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ing it, unless they are writing the entire sector. In OS-9, writing
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
past the end of file on a device expands the file with new data.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
ReadLn<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ReadLn differs from Read in two respects. First, ReadLn termi
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
nates when the first end-of-line (carriage return) is encountered.
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ReadLn performs any input editing that is appropriate for the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
device. In the case of SCF, editing involves handling functions
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
such as backspace, line deletion, and the removal of the high
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
order bit from characters.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
Write Ln .--&middot;,<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
WriteLn is the counterpart of ReadLn. It calls the device driver
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
to transfer data up to and including the first (if any) carriage
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
return encountered. Appropriate output editing can also be per
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
formed. For example, SCF outputs a line feed, a carriage return
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
character, and nulls (if appropriate for the device). It also pauses
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
at the end of a screen page.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
GetStat, PutStat<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The GetStat (get status) and PutStat (put status) system calls
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
are wildcard calls designed to provide a method of accessing fea
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tures of a device (or file manager) that are not generally device
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
independent. The file manager can perform specific functions
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
such as setting the size of a file to a given value. Pass 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>unknown</I>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
status calls to the driver to provide further means of device inde
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
pendence. For example, a PutStat call to format a disk track
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
might behave differently on different types of disk controllers.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-6<BR>
<IMG SRC="file:///C:\CH4~1\GR000022.JPG" WIDTH="20" HEIGHT="4">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
OS-9's Unified Input/Output System l 4<BR>
<IMG SRC="file:///C:\CH4~1\GR000023.JPG" WIDTH="302" HEIGHT="2">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Close<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Close is responsible for ensuring that any output to a device is
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
completed. (If necessary, Close writes out the last buffer.) It
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
releases any buffer space allocated in an Open or Create. Close
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
does not execute the device driver's terminate routine, but can
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
do specific end-of-file processing if you want it to, such as writ
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ing end-of-file records on disks, or form feeds on printers.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="5" FACE="Times Roman" COLOR="#000000">
Interfacing with Device Drivers<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Strictly speaking, device drivers must conform to the general for
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
mat presented in this manual. The I/O Manager is slightly dif
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ferent because it only uses the Init and Terminate entry points.
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Other entry points need only be compatible with the file man
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ager for which the driver is written. For example, the Read entry
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
point of an SCF driver is expected to return one byte from the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
device. The Read entry point of an RBF driver, on the other
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
hand, expects Read to return an entire sector.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The following code is part of an SCF file manager. The code
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
shows how a file manager might call a driver.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-7<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9 Technical Reference<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
<UL>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>IOEXEC
</UL>
</UL>
<BR>
 <UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Execute Device's Read/Write Routine
</UL>
</UL>
<BR>
<BR>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Passed: (A) = Output character (write)
</UL>
</UL>
<BR>
 <UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>(X) = Device Table entry ptr
</UL>
</UL>
<BR>
 <UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>(Y) = Path Descriptor pointer
</UL>
</UL>
<BR>
 <UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>(U) = Offset of routine (D$Read,
</UL>
</UL>
<BR>
  <UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>D$Write)
</UL>
</UL>
<BR>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Returns: (A) = Input char (read)
</UL>
</UL>
<BR>
 <UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>(B) = Error code, CC set if error
</UL>
</UL>
<BR>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Destroys B,CC
</UL>
</UL>
<BR>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>IOEXEC pshs a,x,y,u save registers
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldu V$STAT,x get static storage for driver
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldx V$DRIV,x get driver module address
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldd M$EXEC,x and offset of execution entries
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>addd 5,s offset by read/write
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>leax d,x absolute entry address
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>lda ,s+ restore char (for write)
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>jsr O,x execute driver read/write
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>puts x,y,u,pc return (A)=char, (B)=error
</UL>
<BR>
<BR>
 <UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>emod Module CRC
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Size equ * size of sequential file manager
</UL>
<BR>
<BR>
</TT>
</FONT>
<FONT SIZE="5" FACE="Times Roman" COLOR="#000000">
Device Driver Modules<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The device driver modules are subroutine packages that perform
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
basic, low-level I/O transfers to or from a specific type of I/O
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
device hardware controller. These modules are re-entrant. So,
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
one copy of the module can concurrently run several devices that
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
use identical I/O controllers.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Device driver modules use a standard module header, in which
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
the module type is specified as code $Ex (device driver). The exe
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
cution offset address in the module header points to a branch
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
table that has a minimum of six 3-byte entries.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Each entry is typically an LBRA to the corresponding subrou
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tine. The file managers call specific routines in the device driver
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
through this table, passing a pointer to a path descriptor and
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
passing the hardware control register address in the 6809 regis
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ters. The branch table looks like this:
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-8<BR>
<IMG SRC="file:///C:\CH4~1\GR000024.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000025.JPG" WIDTH="18" HEIGHT="4">
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I><U>OS-9's Unified Input/Output System / 4
</UL>
</UL>
<BR>
</U></I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<B>Code Meaning
</UL>
<BR>
<UL>
</B>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
+ $00 Device initialization routine
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
+ $03 Read from device
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
+ $06 Write to device
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
+ $09 Get device status
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
+ $OC Set device status
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
+ $OF Device termination routine
</UL>
<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
(For a complete description of the parameters passed to these<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
subroutines, see the "Device Driver Subroutines" sections in<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Chapters 5 and 6.)<BR>
<IMG SRC="file:///C:\CH4~1\GR000026.JPG" WIDTH="18" HEIGHT="3">
<IMG SRC="file:///C:\CH4~1\GR000027.JPG" WIDTH="302" HEIGHT="2">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-9<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9 Technical Reference<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Device Driver Module Format<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Relative<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Address<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$00<BR>
<IMG SRC="file:///C:\CH4~1\GR000028.JPG" WIDTH="24" HEIGHT="11">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$02<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$03<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$04<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$05<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$06<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$07<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$08<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$09<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OA<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OB<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OC<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OD<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Use<BR>
<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Sync Bytes ($87CD)<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Module Size (bytes)<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Module Name Offset<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Type Language<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Attributes Revision<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Header Parity Check<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Execution Offset<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Permanent Storage Size<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Mode Byte<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Module Body<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
CRC Check Value<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$DModeByte-(DSPEPWPREWR)<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Check<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Range<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Header<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Parity<BR>
<IMG SRC="file:///C:\CH4~1\GR000029.JPG" WIDTH="302" HEIGHT="2">
<BR>
</FONT>
<FONT SIZE="2" FACE="Times Roman" COLOR="#000000">
4-10<BR>
<IMG SRC="file:///C:\CH4~1\GR000030.JPG" WIDTH="20" HEIGHT="4">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Module<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
CRC<BR>
<IMG SRC="file:///C:\CH4~1\GR000031.JPG" WIDTH="22" HEIGHT="5">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9's Unified Input/Output System l 4<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<B>OS-9 Interaction With Devices<BR>
</B>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Device drivers often must wait for hardware to complete a task
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
or for a user to enter data. Such a wait situation occurs if an
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
SCF device driver receives a Read but there is no data is avail
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
able, or if it receives a Write and no buffer space is available.
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
OS-9 drivers that encounter this situation should suspend the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
current process (via F$Sleep). In this way the driver allows other
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
processes to continue using CPU time.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The most efficient way for a driver to awaken itself and resume
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
processing data is by using interrupt requests (IRAs). It is possi
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ble for the driver to sleep for a number of system clock ticks and
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
then check the device or buffer for a ready signal. The drawbacks
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
to this technique are:
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>0 </TT>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
It requires the system clock to always remain active.
</UL>
<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
It might require a large number of ticks (perhaps 20) for
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
the device to become ready. Such a case leaves you with
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
a dilemma. If you make the program sleep for two ticks,
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
the system wastes CPU time while checking for device
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ready. If the driver sleeps 20 ticks, it does not have a
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
good response time.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
An interrupt system allows the hardware to report to the CPU
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
and the device drivers when the device is finished with an opera
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tion. Using interrupts to its advantage, a device driver can set
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
up interrupt handling to occur when a character is sent or
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
received or when a disk operation is complete. There is a built-in
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
polling facility for pausing and awakening processes. Here is a
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
technique for handling interrupts in a device driver:
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
1. Use the Init routine to place the driver interrupt service call
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
(IRQSVC) routine in the IRQ polling sequence via an F$IRQ
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
system call:
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
<UL>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldd V.Port,u get addre55 to poll
</UL>
</UL>
<BR>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>leax IRQPOLL,pcr point to IRQ packet
</UL>
</UL>
<BR>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>leay IRQSERVC,pcr point to IRQ routine
</UL>
</UL>
<BR>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>OS9 F$IRQ add dev to poll Sequence
</UL>
</UL>
<BR>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>bc5 Error abnormal exit if error
</UL>
</UL>
<BR>
<BR>
<P ALIGN="JUSTIFY">
<UL>
</TT>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
2. Ensure that driver programs waiting for their hardware, call
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
the sleep routine. The sleep routine copies V.Busy to
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
V.Wake. Then, it goes to sleep for some period of time.
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000032.JPG" WIDTH="14" HEIGHT="7">
<IMG SRC="file:///C:\CH4~1\GR000033.JPG" WIDTH="22" HEIGHT="6">
<IMG SRC="file:///C:\CH4~1\GR000034.JPG" WIDTH="10" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000035.JPG" WIDTH="306" HEIGHT="3">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-11<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I><U>OS-9 Technical Reference<BR>
</U></I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
3. When the driver program wakes up, have it check to see
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
whether it was awakened by an interrupt or by a signal sent
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
from some other process.
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Usually, the driver performs this check by reading the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
V.Wake storage byte. The V.Busy byte is maintained by the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
file manager to be used as the process ID of the process
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
using the driver. When V.Busy is copied into V.Wake, then
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
V.Wake becomes a flag byte and an information byte. A non
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
zero Wake byte indicates that there is a process awaiting an
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
interrupt. The value in the Wake byte indicates the process
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
to be awakened by sending a wakeup signal as shown in the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
following code:
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
 
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida V.Hu5y,u get proc ID<BR>
 </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>5ta V.Wake,u arrange for wakeup<BR>
 </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>andcc #^IntMa5k5 prep for interrupts<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>S1eepS0 ldx #0 or any other tick time<BR>
  </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>(if signal test )<BR>
 </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>OS9 F$Sleep await an IRQ<BR>
 </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldx D.Proc get proc de5c ptr if<BR>
  </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>signal test<BR>
 </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldb P$Signal,x </TT>
</FONT>
<FONT SIZE="1" FACE="Times Roman" COLOR="#000000">
i5 
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>signal present?<BR>
  </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>(if signal test)<BR>
 </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>bne SigTe5t bra if 50 if Signal<BR>
  </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>test<BR>
 </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>t5t V.Wake,u IRQ occur?<BR>
 </TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>bne S1eepS0 bra if not<BR>
<BR>
<P ALIGN="JUSTIFY">
<UL>
</TT>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Note that the code labeled "if signal test" is only necessary
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
if the driver wishes to return to the caller if a signal is sent
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
without waiting for the device to finish. Also note that IRQs
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
and FIRQs must be masked between the time a command is
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
given to the device and the moving of V.Busy and V .Wake . If
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
they are not masked, it is possible for the device IRQ to
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
occur and the IRQSERVC routine to become confused as to
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
whether it is sending a wakeup signal or not.
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000036.JPG" WIDTH="20" HEIGHT="3">
<IMG SRC="file:///C:\CH4~1\GR000037.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000038.JPG" WIDTH="20" HEIGHT="3">
<IMG SRC="file:///C:\CH4~1\GR000039.JPG" WIDTH="302" HEIGHT="2">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-12<BR>
<UL>
<UL>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I><U>OS-9's Unified Input/Output System / 4
</UL>
</UL>
</UL>
</UL>
</UL>
<BR>
</U></I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
4. When the device issues an interrupt, 4S-9 calls the routine
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
at the address given in F$IRQ with the interrupts masked.
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Make the routine as short as possible, and have it return
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
with an RTS instruction. IRQSERVC can verify that an
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
interrupt has occurred for the device. It needs to clear the
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
interrupt to retrieve any data in the device. Then the
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
V.Wake byte communicates with the main driver module. If
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
V.Wake is non-zero, clear it to indicate a true device inter
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
rupt and use its contents as the process ID for an F$Send
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
system call. The F$Send call sends a wakeup signal to the
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
process. Here is an example:
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldx V.Port,u get device addre55<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>t5t ?? is it real interrupt from device?<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>bne IRQSVC90 bra to error if not<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida Data,x get data from device<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>5ta O,y<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida V.Wake,u<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>beq IRQSVC80 bra if none<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>clr V.Wake,u clear it as flag to main<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>routine<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldb #S$Wake,u get wakeup signal<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>OS9 F$Send Send Signal to driver<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>IRQSVC80 clrb clear carry bit (all is well)<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>rt5<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>IROSVC90 comb Set carry bit (i5 an IRQ call)<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>rt5<BR>
<BR>
</TT>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
Suspend State (Level Two only)<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
The Suspend State allows the elimination of the F$Send system
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
call during interrupt handling. Because the process is already in
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
the active queue, it need not be moved from one queue to
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
another. The device driver IRQSERVC routine can now wake up
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
the suspended main driver by clearing the process status byte
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
suspend bit in the process state. Following are sample routines
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
for the Sleep and IRQSERVC calls:
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida D.Proc get proce55 ptr
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>5ta V.Wake,u prep for re-awakening
</UL>
</UL>
</UL>
<BR>
<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>` enable device to IRQ, give command, etc.<BR>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>bra CmdSO enter 5u5pend loop
</UL>
</UL>
</UL>
</UL>
<BR>
<BR>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Cmd30 ldx D.Proc get ptr to proce55 desc
</UL>
</UL>
<BR>
<BR>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>4-13
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
<BR>
<IMG SRC="file:///C:\CH4~1\GR000040.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000041.JPG" WIDTH="18" HEIGHT="3">
</TT>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9 Technical Reference<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida P$State,x get state flag
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ora `Suspend put proc in suspend state
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>sta P$State,x save it in proc desc
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>andcc #^IntMasks unmask interrupts
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldx #1 give up time slice
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>OS9 F$Sleep suspend (in active queue)
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Cmd50 orcc #IntMasks mask interrupts while
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>changing state
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldx D.Proc get proc desc addr (if signal
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>test)
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida P$Signal,x get signal (if signal test)
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>beg SigProc bra if signal to be handled
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida V.Wake,u true interrupt?
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>bne Cmd30 bra if not
</UL>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>andcc #^IntMasks assure interrupts unmasked
</UL>
<BR>
<BR>
<P ALIGN="JUSTIFY">
</TT>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Note that D.Proc is a pointer to the process descriptor of the cur
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
rent process. Process descriptors are always allocated on 256
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
byte page boundaries. Thus, having the high order byte of the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
address is adequate to locate the descriptor. D.Proc is put in
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
V.Wake as a dual value. In one instance, it is a flag byte indi
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
cating that a process is indeed suspended. In the other instance,
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
it is a pointer to the process descriptor which enables the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
IRQSERVC routine to clear the suspend bit. It is necessary to
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
have the interrupts masked from the time the device is enabled
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
until the suspend bit has been set. Making the interrupts
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
ensure that the IRQSERVC routine does not think it has cleared
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
the suspend bit before it is even set. If this happens, when the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
bit is set the process might go into permanent suspension. The
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
IRQSERVC routine sample follows:
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
<UL>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>ldy V.Port,u get dev addr
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>tst V.Wake,u is process awaiting
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>IRQ?
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>beg IRQSVCER no exit
</UL>
</UL>
</UL>
</UL>
<BR>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>clear device interrupt
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>exit if IRQ not from this device
</UL>
</UL>
</UL>
</UL>
<BR>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida V.Wake,u get process ptr
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>clrb
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>stb V.Wake,u clear proc waiting flag
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>tfr d,x get process descriptor ptr
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>Ida P$State,x get state flag
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>anda # Suspend clear suspend state
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>sta P$State,x save it
</UL>
</UL>
</UL>
</UL>
<BR>
<BR>
</TT>
</FONT>
<FONT SIZE="2" FACE="Times Roman" COLOR="#000000">
4-14<BR>
<IMG SRC="file:///C:\CH4~1\GR000042.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000043.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000044.JPG" WIDTH="46" HEIGHT="1">
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9's Unified Input/Output System / 4
</UL>
</UL>
</UL>
<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>clrb clear carry bit
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
<BR>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>rt5
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
<BR>
</TT>
</FONT>
<FONT SIZE="1" FACE="Times Roman" COLOR="#000000">
r-- 
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>IRQSVCER comb Set carry bit<BR>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
</TT>
</FONT>
<FONT SIZE="2" FACE="Courier" COLOR="#000000">
<TT>rt5
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
<BR>
<BR>
<UL>
</TT>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<B>Device Descriptor Modules
</UL>
<BR>
</B>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Device descriptor modules are small, non-executable modules.
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Each one provides information that associates a specific 1/O
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
device with its logical name, hardware controller address(es),
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
device driver, file manager name, and initialization parameters.
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Unlike the device drivers and file managers, which operate on
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
classes of devices, each device descriptor tailors its functions to a
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
specific device. Each device must have a device descriptor.
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Device descriptor modules use a standard module header, in
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
which the module type is specified as code $Fx (device descrip
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tor). The name of the module is the name by which the system
</UL>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<UL>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
and user know the device (the device name given in pathlists).
</UL>
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The rest of the device descriptor header consists of the informa
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tion in the following chart:
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
Relative<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<U>Address(es) Use<BR>
</U>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
$09,$OA The relative address of the file manager<BR>
 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
name string address<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
$OB,$OC The relative address of the device driver<BR>
 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
name string<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
$OD Mode/Capabilities: D S PE PW PR E W R<BR>
 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
(directory, single user, public execute, pub<BR>
 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
lic write, public read, execute, write, read)<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
$OE,$OF,$10 The absolute physical (24-bit) address of the<BR>
 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
device controller<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
$11 The number of bytes 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>(n </I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
bytes) in the ini<BR>
 
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tialization table<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<U>$12,$12 </U>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<U><I>+ n </I></U>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<U>Initialization table<BR>
</U>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
When OS-9 opens a path to the device, the system copies the ini-<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
tialization table into the option section <B>(PD.OPT) </B>of the path
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
descriptor. (See "Path Descriptors" in this chapter.)
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-15
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
</UL>
<BR>
<IMG SRC="file:///C:\CH4~1\GR000045.JPG" WIDTH="19" HEIGHT="2">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9 Technical Reference<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The values in this table can be used to define the operating
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
parameters that are alterable by the Get Status and Set Status
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
system calls (I$GetStt and I$SetStt). For example, parameters
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
that are used when initializing terminals define which control
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
characters are to be used for functions such as backspace and
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
delete.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The initialization table can be a maximum of 32 bytes long. If
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
the table is fewer than 32 bytes long, OS-9 sets the remaining
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
values in the path descriptor to 0.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
You might wish to add devices to your system. If a similar device
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
driver already exists, all you need to do is add the new hardware
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
and load another device descriptor. Device descriptors can be in
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
the boot module or they can be loaded into RAM from mass-stor
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
age files while the system is running.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
The following diagram illustrates the device descriptor format:<BR>
<IMG SRC="file:///C:\CH4~1\GR000046.JPG" WIDTH="20" HEIGHT="3">
<IMG SRC="file:///C:\CH4~1\GR000047.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000048.JPG" WIDTH="18" HEIGHT="3">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-16<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9's Unified Input/Output System l 4<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Device Descriptor Format<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<B>Relative</B>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<B>Address</B>
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$00
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$01
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$02
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$03
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$04
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$05<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$06<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$07<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$08<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$09<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OA
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OB
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000049.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000050.JPG" WIDTH="24" HEIGHT="5">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Use<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OD
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OE
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$OF<BR>
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$10
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$11
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
$12,$12 + n
</FONT>
</P>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Sync Bytes ($87CD)<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Module Size (bytes)<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Offset to Module Name<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
F$ (Type)  $1 (Lang)<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Attributes  Revision<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Header Parity Check<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Offset to File Manager<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Name String<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Offset to Device Driver<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Name String<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Mode Byte<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Device Controller<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Absolute Physical Addr.<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
(24 bit)<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Initialization Table Size<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
(Initialization Table)<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
(Name Strings, and so on)<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
CRC Check Value<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Check<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Range<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
header<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
parity<BR>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
module
</UL>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
CRC
</UL>
<BR>
<BR>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>1 Y,o
</UL>
<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<I>DN </I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>LL" ~lGL<BR>
  </I>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<I>OFF<BR>
</I>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<I>)w U s? B E<BR>
 </I>
</FONT>
<FONT SIZE="4" FACE="Times Roman" COLOR="#000000">
<I>$D7<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>R^TNBOLr<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>,MAY t </I>
</FONT>
<FONT SIZE="5" FACE="Times Roman" COLOR="#000000">
f9 7<BR>
 
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<I>P,A<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000051.JPG" WIDTH="306" HEIGHT="3">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<I>4-17<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9 Technical Reference<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="5" FACE="Times Roman" COLOR="#000000">
<B>Path Descriptors<BR>
</B>
</FONT>
<FONT SIZE="5" FACE="Times Roman" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Every open path is represented by a data structure called a path _ ,<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>descriptor </I>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
(PD). The PD contains the information the file man<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
agers and device drivers require to perform I/O functions.<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
PDs are 64 bytes long and are dynamically allocated and deallo<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
cated by the I/O manager as paths are opened and closed.<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
They are internal data structures, that are not normally refer<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
enced from user or applications programs. The description of PDs<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
is presented here mainly for those programmers who need to<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
write custom file managers, device drivers, or other extensions to<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
OS-9.<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
PDs have three sections. The first section, which is ten bytes<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
long, is the same for all file managers and device drivers. The<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
information in the first section is shown in the following chart.<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<B>Path Descriptor: Standard Information<BR>
</B>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<B>Relative Size<BR>
</B>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<B><U>Name Address (Bytes) </B></U>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
<U>Use<BR>
</U>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PD.PD $00 1 Path number<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PD.MOD $01 1 Access mode: 1 = read, 2 =<BR>
  
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
write, 3 = update<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PD.CNT $02 1 Number of open paths using<BR>
  
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
this PD<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PD.DEV $03 2 Address of the associated<BR>
  
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
device table entry<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PD.CPR $05 1 Current process ID<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PD.RGS $06 2 Address of the caller's regis<BR>
  
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
ter stack<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PD.BUF $08 2 Address of the 256-byte<BR>
  
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
data buffer (if used)<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PDYST $OA 22 Defined by the file manager<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
PD.OPT $20 32 Reserved for the Getstat/<BR>
  
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
Setstat options<BR>
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
<B>PD.FST </B>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
is 12-byte storage reserved for and defined by each type<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond1" COLOR="#000000">
of file manager for file pointers, permanent variables, and so on.<BR>
<IMG SRC="file:///C:\CH4~1\GR000052.JPG" WIDTH="20" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000053.JPG" WIDTH="22" HEIGHT="4">
<IMG SRC="file:///C:\CH4~1\GR000054.JPG" WIDTH="302" HEIGHT="2">
<BR>
</FONT>
<FONT SIZE="3" FACE="Garamond" COLOR="#000000">
4-18<BR>
<UL>
<UL>
<UL>
<UL>
<UL>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<I>OS-9's Unified Input/Output System / 4
</UL>
</UL>
</UL>
</UL>
</UL>
<BR>
</I>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
PROPT is a 32-byte option area used for file or device operat
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
ing parameters that are dynamically alterable. When the path is
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
opened, the 1/O manager initializes these variables by copying
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
the initialization table that is in the device descriptor module.
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
User programs can change the values later, using the Get Status
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
and Set Status system calls.
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<BR>
<P ALIGN="JUSTIFY">
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
PD.FST and PD.OPT are defined for the file manager in the
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
assembly-language equate file (SCFDefs for the SCF manager or
</FONT>
</P>
<P ALIGN="JUSTIFY">
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
RBFDefs for the RBF manager).
</FONT>
</P>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
<IMG SRC="file:///C:\CH4~1\GR000055.JPG" WIDTH="16" HEIGHT="19">
<BR>
</FONT>
<FONT SIZE="3" FACE="Times Roman" COLOR="#000000">
4-19<BR>
</FONT>
</BODY>
</HTML>
