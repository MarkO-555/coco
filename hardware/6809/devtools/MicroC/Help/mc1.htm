<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1254">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>1.</title>
</head>

<body bgcolor="#FFFFFF">

<table border="0" width="630">
    <tr>
        <td><a name="INTRODUCTION"><font size="2" face="Arial"><strong>1.
        INTRODUCTION</strong></font></a><p><font size="2"
        face="Arial">This complete development package includes
        all tools and utilitiesyou need to develop 'C' and
        'ASM'  code for one or more CPU families.The tools are
        fully configurable  to  support  virtually  any 
        targetenvironment, and most derivatives of the targeted
        CPU.</font></p>
        <p class="MsoPlainText"><a
        name="1.1 Document conventions"><font size="2"
        face="Arial"><strong><i>1.1 Document conventions</i></strong></font></a><font
        size="2" face="Arial"><br>
        <br>
        The following conventions are used in this document:<br>
        <br>
        {CPU}     <span style="color:white"> ........  </span>     - Indicates the full
        name of the CPU for which you are developing code.<br>
                <span style="color:white">   ............... .. .</span> - Short form
        of CPU name.</font></p>
        <p class="MsoPlainText"><font size="2" face="Arial">&lt;text&gt;  <span style="color:white"> ............    </span>  
        - Text shown in angle braces indicates data or options
        that the user MUST supply.<br>
        [text]    <span style="color:white">............. </span>      - Text shown in
        square braces indicates data or options that are
        optional.<br>
        ...       <span style="color:white"> ...............  </span>    - Multiple
        options may be specified.<br>
        CPU[,CPU ...]:<span style="color:white"> ...... </span>- Indicates a section or note that
        applies to only the indicated CPU's.</font></p>
        <p class="MsoPlainText"><a
        name="1.2 Memory Configuration"><font size="2"
        face="Arial"><strong><i>1.2 Memory Configuration</i></strong></font></a><font
        size="2" face="Arial"><br>
        <br>
            The runtime library for the compiler can be
        configured to match the requirements of most target
        environments. Complete information  on the default
        library  setup,  and  details  on  customizing 
        the      library are contained in a  READ.ME 
        file  located  in  the  LIB subdirectory.</font></p>
        <p class="MsoPlainText"><a name="1.3 Code Portability"><font
        size="2" face="Arial"><strong><i>1.3 Code Portability</i></strong></font></a><font
        size="2" face="Arial"><br>
        <br>
            With few exceptions,  this compiler follows the
        syntax  of  the &quot;standard&quot; UNIX compiler.
        Programs  written  in  MICRO-C  should compile with
        few changes under other &quot;standard&quot; compilers.<br>
        <br>
                  1.3.1 Unsupported Features:<br>
        <br>
                        MICRO-C does not currently
        support the following features of  standard 'C':<br>
                    * Long / Double / Float /
        Enumerated data types, Typedef and Bit fields.<br>
                    *   32 bit &quot;long&quot;
        number functions are supported via library function
        calls. These may easily be modified to support larger
        numbers.<br>
        <br>
                  1.3.2 Additional Features<br>
        <br>
                        MICRO-C provides a few
        additional  features  which  are  not always included
        in &quot;standard&quot; 'C' compilers: Unsigned character
        variables, Nested comments, 16 bit character constants,
        Inline assembly code capability.</font></p>
        <p class="MsoPlainText"><a name="1.4 Setting up MICRO-C"><font
        size="2" face="Arial"><strong><i>1.4 Setting up MICRO-C</i></strong></font></a><font
        size="2" face="Arial"><br>
        <br>
            Once  you  have  installed  the  files 
        from  the  distribution diskettes (See READ.ME on the
        diskette(s) for instructions), there are  a  few 
        simple steps that should  be taken to
        complete        installation of the compiler.<br>
        <br>
                  - Setup the MCDIR and TEMP/MCTMP 
        environment  variables,  as described in the section
        entitled &quot;THE COMMAND CO-ORDINATOR&quot;.<br>
                   - Add the MICRO-C home directory to
        your DOS  'PATH'  if you wish to be able to run the
        MICRO-C compiler and  tools  from  within other
        directories on your system.<br>
        <br>
                   - Make sure that the runtime
        libraries are configured correctly  for your target
        system hardware. See the READ.ME file in the LIB
        directory.<br>
        <br>
                     Once everything is installed and
        configured correctly,  you are ready to begin using the
        compiler. There are three ways to run the compiler:<br>
        <br>
                   Use the  Integrated 
        Development Environment (DDSIDE), which allows you to
        enter, compile and debug your programs from a single
        menu based environment. Complete documentation on DDSIDE
        is provided in the DDSIDE document.<br>
        <br>
                   - Use the  &quot;one
        step&quot; COMMAND CO-ORDINATOR  (CC ) to run the
        compiler from the DOS prompt with a single command.CC is
        described in detail later in this document.<br>
        <br>
                   - Run the individual steps of the
        compiler separately.This gives you the maximum control of
        the compiling process,  but  is  not recommended for
        the novice user.Complete descriptions of 
        the          compilation steps and  commands
        are given later in this document.</font></p>
        <p class="MsoPlainText"><a
        name="1.5 The compiling process"><font size="2"
        face="Arial"><strong><i>1.5 The compiling process</i></strong></font></a><font
        size="2" face="Arial"><br>
        <br>
                     There are five programs which
        work  together to completely compile a MICRO-C program:<br>
        <br>
                     The PREPROCESSOR (MCP) takes
        the original 'C' source file, performs MACRO expansion
        and incorporates the contents of INCLUDE files to get
        a &quot;pure&quot;  'C' output file.
        A less powerful pre-processor is also contained inside
        the COMPILER,  which allows this step to be
        skipped for programs which use only simple
        pre-processor functions.<br>
        <br>
                     The COMPILER  (MCC) reads a
        file  containing a 'C' source program, and translates
        it into an equivalent assembly language program.<br>
        <br>
                     The OPTIMIZER  (MCO) reads the
        assembly language output from the compiler identifying
        and replacing &quot;general&quot;  code produced by the
        compiler with more  efficient code  which  is
        equivalent  in specific cases. This step is optional,
        allowing  you  to choose between faster compile time
        and greater program efficiency.<br>
        <br>
                    The SOURCE LINKER (SLINK) combines
        the assembly language output from the compiler with any 
        required  outines from the runtime library, to create
        an entire program file.<br>
        <br>
                     The ASSEMBLER (ASM) 
        assembles this program file into a  downloadable
        binary image in either INTEL or MOTOROLA hex file</font></p>
        </td>
    </tr>
</table>
<p>&nbsp;</p>
<table width="605" border="0">
  <tr> 
    <td> 
      <p>&nbsp;</p>
      <p><font face="Arial, Helvetica, sans-serif" size="2">&quot;Converted by 
        BiPOM Electronics to HTML format from original Micro C documentation by 
        Dunfield Development Systems. Please see the Micro C documentation that 
        is included with Micro C for the original forms of these pages.&quot;</font></p>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
